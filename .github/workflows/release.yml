name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  # packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.17.0'
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@main

      - name: Update package.json Version
        run: |
          current_version=$(cat package.json | jq -r '.version')
          next_version="${{ steps.get_next_version.outputs.version }}"
          echo "Updating version in package.json from $current_version to $next_version"

          # Update the version using `jq`
          jq --arg version "$next_version" '.version = $version' package.json > package.tmp.json && mv package.tmp.json package.json

      # Commit and push updated `package.json` (if a version change occurred)
      - name: Commit and Push Updated package.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add package.json
          git commit -m "chore(release): ${{ steps.get_next_version.outputs.version }} [skip ci]"
          git push origin main

      # Tag the release in the repository
      - name: Push Git Tag
        run: |
          next_version="${{ steps.get_next_version.outputs.version }}"
          git tag -a "$next_version"
          git push origin "$next_version"
